import screens from "@/utils/screens";
import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Label,
  TooltipProps,
  LabelList,
} from "recharts";
import {
  NameType,
  ValueType,
} from "recharts/types/component/DefaultTooltipContent";

const data = [
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 50,
    ACCEPTEDON: 90,
    days: 20,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 50,
    ACCEPTEDON: 85,
    days: 45,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 65,
    ACCEPTEDON: 110,
    days: 50,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 65,
    ACCEPTEDON: 90,
    days: 30,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 55,
    ACCEPTEDON: 110,
    days: 100,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 60,
    ACCEPTEDON: 120,
    days: 220,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 55,
    ACCEPTEDON: 70,
    days: 230,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 65,
    ACCEPTEDON: 90,
    days: 210,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 65,
    ACCEPTEDON: 70,
    days: 170,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 70,
    ACCEPTEDON: 50,
    days: 250,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 65,
    ACCEPTEDON: 40,
    days: 2100,
  },
  {
    name: "40L 9.85% 24m",
    OFFEREDON: 55,
    ACCEPTEDON: 50,
    days: 190,
  },
];

function getLabel(label: string) {
  switch (label) {
    case "JAN":
      return "JANUARY";
    case "FEB":
      return "FEBRUARY";
    case "MAR":
      return "MARCH";
    case "APR":
      return "APRIL";
    case "MAY":
      return "MAY";
    case "JUN":
      return "JUNE";
    case "JUL":
      return "JULY";
    case "AUG":
      return "AUGUST";
    case "SEP":
      return "SEPTEMBER";
    case "OCT":
      return "OCTOBER";
    case "NOV":
      return "NOVEMBER";
    case "DEC":
      return "DECEMBER";
    default:
      return "";
  }
}

const CustomTooltip = ({
  active,
  payload,
  label,
}: TooltipProps<ValueType, NameType>) => {
  if (active && payload) {
    console.log(payload, active);

    return (
      <div style={{ width: "200px" }} className="custom-tooltip">
        <p className="label text-[#949494] font-gola font-semibold mb-2">{`${getLabel(
          label
        )}`}</p>
        <div className="flex justify-between">
          <div className="flex items-center">
            <div
              style={{
                height: "6px",
                width: "6px",
                backgroundColor: "#3F8CFF",
              }}
            ></div>
            <h1 className="text-sm font-gola ml-3">Lakhs</h1>
          </div>
          <p className="desc"> {`${payload[0].value}`}</p>
        </div>
      </div>
    );
  }

  return null;
};

const renderCustomizedLabel = (props:any) => {
  const { x, y, width, height, value } = props;
  const radius = 10;

  return (
    <svg x={x + width / 2} y={y - radius}  textAnchor="middle" dominantBaseline="middle" width="95" height="44" viewBox="0 0 95 44" fill="none" xmlns="http://www.w3.org/2000/svg">
<g  textAnchor="middle" dominantBaseline="middle" filter="url(#filter0_bd_303_3293)">
<rect  textAnchor="middle" dominantBaseline="middle" x="4" width="87" height="36" rx="10" fill="white" shape-rendering="crispEdges"/>
<path d="M13.7805 21V19.479H10.5765V18.831L13.6905 14.7H14.6265V18.741H15.4365V19.479H14.6265V21H13.7805ZM11.4765 18.741H13.7805V15.69L11.4765 18.741ZM18.6796 21.09C18.3736 21.09 18.0856 21.039 17.8156 20.937C17.5456 20.829 17.3056 20.652 17.0956 20.406C16.8856 20.16 16.7206 19.83 16.6006 19.416C16.4866 18.996 16.4296 18.474 16.4296 17.85V17.67C16.4296 17.088 16.4866 16.602 16.6006 16.212C16.7206 15.816 16.8856 15.501 17.0956 15.267C17.3056 15.033 17.5456 14.865 17.8156 14.763C18.0856 14.661 18.3736 14.61 18.6796 14.61C18.9856 14.61 19.2736 14.661 19.5436 14.763C19.8136 14.865 20.0536 15.033 20.2636 15.267C20.4736 15.501 20.6356 15.816 20.7496 16.212C20.8696 16.602 20.9296 17.088 20.9296 17.67V17.85C20.9296 18.474 20.8696 18.996 20.7496 19.416C20.6356 19.83 20.4736 20.16 20.2636 20.406C20.0536 20.652 19.8136 20.829 19.5436 20.937C19.2736 21.039 18.9856 21.09 18.6796 21.09ZM18.6796 20.352C18.8716 20.352 19.0516 20.319 19.2196 20.253C19.3876 20.181 19.5346 20.055 19.6606 19.875C19.7926 19.689 19.8946 19.434 19.9666 19.11C20.0446 18.78 20.0836 18.36 20.0836 17.85V17.67C20.0836 17.046 20.0176 16.566 19.8856 16.23C19.7596 15.894 19.5886 15.663 19.3726 15.537C19.1626 15.411 18.9316 15.348 18.6796 15.348C18.4276 15.348 18.1936 15.411 17.9776 15.537C17.7676 15.663 17.5966 15.894 17.4646 16.23C17.3386 16.566 17.2756 17.046 17.2756 17.67V17.85C17.2756 18.36 17.3116 18.78 17.3836 19.11C17.4616 19.434 17.5636 19.689 17.6896 19.875C17.8216 20.055 17.9716 20.181 18.1396 20.253C18.3136 20.319 18.4936 20.352 18.6796 20.352ZM22.3707 21V14.7H23.2167V20.262H26.4207V21H22.3707Z" fill="#202020"/>
<path d="M35.855 21.09C35.519 21.09 35.216 21.039 34.946 20.937C34.682 20.835 34.463 20.682 34.289 20.478C34.115 20.268 33.992 20.007 33.92 19.695H34.766C34.85 19.905 34.982 20.064 35.162 20.172C35.348 20.28 35.579 20.334 35.855 20.334C36.143 20.334 36.401 20.262 36.629 20.118C36.863 19.974 37.049 19.731 37.187 19.389C37.331 19.047 37.409 18.579 37.421 17.985C37.253 18.279 37.019 18.489 36.719 18.615C36.425 18.735 36.137 18.795 35.855 18.795C35.435 18.795 35.069 18.717 34.757 18.561C34.451 18.399 34.211 18.168 34.037 17.868C33.869 17.562 33.785 17.193 33.785 16.761V16.671C33.785 16.269 33.881 15.915 34.073 15.609C34.265 15.297 34.52 15.054 34.838 14.88C35.162 14.7 35.516 14.61 35.9 14.61C36.374 14.61 36.782 14.712 37.124 14.916C37.466 15.12 37.73 15.435 37.916 15.861C38.102 16.281 38.195 16.824 38.195 17.49V17.67C38.195 18.498 38.087 19.164 37.871 19.668C37.655 20.166 37.37 20.529 37.016 20.757C36.662 20.979 36.275 21.09 35.855 21.09ZM35.972 18.039C36.41 18.039 36.743 17.928 36.971 17.706C37.199 17.484 37.313 17.166 37.313 16.752V16.662C37.313 16.254 37.196 15.936 36.962 15.708C36.734 15.48 36.404 15.366 35.972 15.366C35.534 15.366 35.201 15.477 34.973 15.699C34.745 15.915 34.631 16.236 34.631 16.662V16.752C34.631 17.166 34.745 17.484 34.973 17.706C35.201 17.928 35.534 18.039 35.972 18.039ZM40.0893 21.09C39.9753 21.09 39.8703 21.06 39.7743 21C39.6783 20.946 39.6003 20.871 39.5403 20.775C39.4863 20.679 39.4593 20.574 39.4593 20.46C39.4593 20.28 39.5193 20.13 39.6393 20.01C39.7653 19.89 39.9153 19.83 40.0893 19.83C40.2633 19.83 40.4103 19.89 40.5303 20.01C40.6563 20.13 40.7193 20.28 40.7193 20.46C40.7193 20.574 40.6893 20.679 40.6293 20.775C40.5753 20.871 40.5003 20.946 40.4043 21C40.3143 21.06 40.2093 21.09 40.0893 21.09ZM44.1825 21.09C43.6845 21.09 43.2675 21.015 42.9315 20.865C42.6015 20.709 42.3525 20.499 42.1845 20.235C42.0165 19.965 41.9325 19.665 41.9325 19.335C41.9325 18.975 42.0465 18.654 42.2745 18.372C42.5025 18.084 42.8385 17.88 43.2825 17.76C42.9585 17.652 42.6825 17.469 42.4545 17.211C42.2265 16.953 42.1125 16.641 42.1125 16.275C42.1125 15.963 42.1905 15.681 42.3465 15.429C42.5085 15.177 42.7425 14.979 43.0485 14.835C43.3605 14.685 43.7385 14.61 44.1825 14.61C44.6325 14.61 45.0105 14.685 45.3165 14.835C45.6225 14.979 45.8535 15.177 46.0095 15.429C46.1715 15.681 46.2525 15.963 46.2525 16.275C46.2525 16.635 46.1385 16.941 45.9105 17.193C45.6885 17.445 45.4125 17.634 45.0825 17.76C45.5325 17.91 45.8685 18.108 46.0905 18.354C46.3185 18.6 46.4325 18.927 46.4325 19.335C46.4325 19.665 46.3485 19.965 46.1805 20.235C46.0125 20.499 45.7605 20.709 45.4245 20.865C45.0945 21.015 44.6805 21.09 44.1825 21.09ZM44.1825 20.334C44.5305 20.334 44.8065 20.286 45.0105 20.19C45.2145 20.094 45.3615 19.968 45.4515 19.812C45.5415 19.65 45.5865 19.473 45.5865 19.281C45.5865 18.945 45.4545 18.672 45.1905 18.462C44.9265 18.252 44.5905 18.123 44.1825 18.075C43.7745 18.123 43.4385 18.249 43.1745 18.453C42.9105 18.657 42.7785 18.933 42.7785 19.281C42.7785 19.473 42.8235 19.65 42.9135 19.812C43.0035 19.968 43.1505 20.094 43.3545 20.19C43.5585 20.286 43.8345 20.334 44.1825 20.334ZM44.1825 17.445C44.5425 17.397 44.8365 17.283 45.0645 17.103C45.2925 16.917 45.4065 16.656 45.4065 16.32C45.4065 16.014 45.3045 15.78 45.1005 15.618C44.9025 15.45 44.5965 15.366 44.1825 15.366C43.7625 15.366 43.4535 15.45 43.2555 15.618C43.0575 15.78 42.9585 16.014 42.9585 16.32C42.9585 16.656 43.0725 16.917 43.3005 17.103C43.5285 17.283 43.8225 17.397 44.1825 17.445ZM49.5407 21.09C49.1987 21.09 48.9017 21.045 48.6497 20.955C48.3977 20.865 48.1847 20.742 48.0107 20.586C47.8427 20.43 47.7137 20.256 47.6237 20.064C47.5337 19.872 47.4827 19.674 47.4707 19.47H48.3167C48.3467 19.698 48.4667 19.899 48.6767 20.073C48.8927 20.247 49.1807 20.334 49.5407 20.334C49.9487 20.334 50.2697 20.208 50.5037 19.956C50.7377 19.698 50.8547 19.341 50.8547 18.885C50.8547 18.537 50.7917 18.258 50.6657 18.048C50.5397 17.832 50.3747 17.676 50.1707 17.58C49.9727 17.484 49.7627 17.436 49.5407 17.436C49.2167 17.436 48.9617 17.496 48.7757 17.616C48.5957 17.736 48.4577 17.874 48.3617 18.03H47.6057V14.7H51.3407V15.438H48.4517V17.193C48.6077 17.019 48.7877 16.89 48.9917 16.806C49.1957 16.722 49.4237 16.68 49.6757 16.68C50.0957 16.68 50.4557 16.764 50.7557 16.932C51.0557 17.1 51.2867 17.349 51.4487 17.679C51.6167 18.003 51.7007 18.405 51.7007 18.885C51.7007 19.335 51.6077 19.725 51.4217 20.055C51.2417 20.385 50.9897 20.64 50.6657 20.82C50.3417 21 49.9667 21.09 49.5407 21.09ZM53.8614 17.76C53.4414 17.76 53.0964 17.625 52.8264 17.355C52.5564 17.079 52.4214 16.719 52.4214 16.275V16.185C52.4214 15.891 52.4814 15.633 52.6014 15.411C52.7274 15.189 52.8984 15.015 53.1144 14.889C53.3364 14.763 53.5854 14.7 53.8614 14.7C54.1434 14.7 54.3924 14.763 54.6084 14.889C54.8244 15.015 54.9924 15.189 55.1124 15.411C55.2384 15.633 55.3014 15.891 55.3014 16.185V16.275C55.3014 16.719 55.1664 17.079 54.8964 17.355C54.6264 17.625 54.2814 17.76 53.8614 17.76ZM53.8614 17.076C54.0654 17.076 54.2274 17.01 54.3474 16.878C54.4674 16.746 54.5274 16.545 54.5274 16.275V16.185C54.5274 15.915 54.4674 15.714 54.3474 15.582C54.2274 15.45 54.0654 15.384 53.8614 15.384C53.6574 15.384 53.4954 15.45 53.3754 15.582C53.2554 15.714 53.1954 15.915 53.1954 16.185V16.275C53.1954 16.545 53.2554 16.746 53.3754 16.878C53.4954 17.01 53.6574 17.076 53.8614 17.076ZM53.3214 21.09L57.6414 14.79H58.5414L54.2214 21.09H53.3214ZM58.0014 21.18C57.5814 21.18 57.2364 21.045 56.9664 20.775C56.6964 20.499 56.5614 20.139 56.5614 19.695V19.605C56.5614 19.311 56.6214 19.053 56.7414 18.831C56.8674 18.609 57.0384 18.435 57.2544 18.309C57.4764 18.183 57.7254 18.12 58.0014 18.12C58.2834 18.12 58.5324 18.183 58.7484 18.309C58.9644 18.435 59.1324 18.609 59.2524 18.831C59.3784 19.053 59.4414 19.311 59.4414 19.605V19.695C59.4414 20.139 59.3064 20.499 59.0364 20.775C58.7664 21.045 58.4214 21.18 58.0014 21.18ZM58.0014 20.496C58.2054 20.496 58.3674 20.43 58.4874 20.298C58.6074 20.166 58.6674 19.965 58.6674 19.695V19.605C58.6674 19.335 58.6074 19.134 58.4874 19.002C58.3674 18.87 58.2054 18.804 58.0014 18.804C57.7974 18.804 57.6354 18.87 57.5154 19.002C57.3954 19.134 57.3354 19.335 57.3354 19.605V19.695C57.3354 19.965 57.3954 20.166 57.5154 20.298C57.6354 20.43 57.7974 20.496 58.0014 20.496Z" fill="#202020"/>
<path d="M66.5216 21V20.307L69.0416 18.12C69.2996 17.904 69.4976 17.715 69.6356 17.553C69.7736 17.385 69.8666 17.226 69.9146 17.076C69.9686 16.926 69.9956 16.764 69.9956 16.59C69.9956 16.236 69.8906 15.945 69.6806 15.717C69.4706 15.483 69.1826 15.366 68.8166 15.366C68.3786 15.366 68.0426 15.486 67.8086 15.726C67.5746 15.96 67.4576 16.293 67.4576 16.725H66.6116C66.6116 16.311 66.7016 15.945 66.8816 15.627C67.0676 15.309 67.3256 15.06 67.6556 14.88C67.9916 14.7 68.3786 14.61 68.8166 14.61C69.2426 14.61 69.6056 14.697 69.9056 14.871C70.2116 15.039 70.4426 15.273 70.5986 15.573C70.7606 15.867 70.8416 16.206 70.8416 16.59C70.8416 16.878 70.7846 17.142 70.6706 17.382C70.5566 17.616 70.3976 17.838 70.1936 18.048C69.9956 18.258 69.7646 18.477 69.5006 18.705L67.6196 20.262H70.9316V21H66.5216ZM74.7663 21V19.479H71.5623V18.831L74.6763 14.7H75.6123V18.741H76.4223V19.479H75.6123V21H74.7663ZM72.4623 18.741H74.7663V15.69L72.4623 18.741ZM77.5955 21V16.23H78.3335V17.13C78.4355 16.836 78.6095 16.599 78.8555 16.419C79.1075 16.233 79.3925 16.14 79.7105 16.14C80.1245 16.14 80.4425 16.23 80.6645 16.41C80.8865 16.584 81.0395 16.809 81.1235 17.085C81.2795 16.791 81.4775 16.56 81.7175 16.392C81.9635 16.224 82.2575 16.14 82.5995 16.14C83.0915 16.14 83.4755 16.29 83.7515 16.59C84.0275 16.884 84.1655 17.349 84.1655 17.985V21H83.3735V18.165C83.3735 17.691 83.2895 17.355 83.1215 17.157C82.9595 16.959 82.7105 16.86 82.3745 16.86C82.1825 16.86 82.0025 16.914 81.8345 17.022C81.6665 17.124 81.5315 17.274 81.4295 17.472C81.3275 17.664 81.2765 17.895 81.2765 18.165V21H80.4845V18.165C80.4845 17.691 80.4005 17.355 80.2325 17.157C80.0645 16.959 79.8155 16.86 79.4855 16.86C79.2935 16.86 79.1135 16.914 78.9455 17.022C78.7775 17.124 78.6425 17.274 78.5405 17.472C78.4385 17.664 78.3875 17.895 78.3875 18.165V21H77.5955Z" fill="#202020"/>
<rect x="4.5" y="0.5" width="86" height="35" rx="9.5" stroke="#EEEDED" shape-rendering="crispEdges"/>
</g>
<defs>
<filter id="filter0_bd_303_3293" x="0" y="-4" width="95" height="48" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feGaussianBlur in="BackgroundImageFix" stdDeviation="2"/>
<feComposite in2="SourceAlpha" operator="in" result="effect1_backgroundBlur_303_3293"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="4"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.512636 0 0 0 0 0.512636 0 0 0 0 0.512636 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="effect1_backgroundBlur_303_3293" result="effect2_dropShadow_303_3293"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect2_dropShadow_303_3293" result="shape"/>
</filter>
</defs>
</svg>

    
//     <g>
//       {/* <circle cx={x + width / 2} cy={y - radius} r={radius} fill="#8884d8" /> */}
//       <rect style={{
//         border: '1px solid #EEEDED',
//         boxShadow: '0px 4px 4px rgba(131, 131, 131, 0.25)'
//       }}>
//  <text x={x + width / 2} y={y - radius} fill="#000" textAnchor="middle" dominantBaseline="middle">
//         {value}
//       </text>
//       </rect>
     
//     </g>
  );
};

export default function OtherBankChart() {
  const {isMobile,isTablet} = screens()
  return (
    <ResponsiveContainer
      minWidth={isMobile ? 320 : 400}
      maxHeight={500}
      minHeight={300}
      width={isMobile ? "95%" : "100%"}
      height="80%"
    >
      <BarChart
        width={400}
        height={200}
        data={isMobile ? data.slice(0,5) :isTablet ? data.slice(0,7) : data}
        margin={{
          top: 30,
          right: isMobile? 0 :10,
          left: 10,
          bottom: 5,
        }}
        barGap={-10}
      >
         <defs>
        <linearGradient
          id="colorUv"
          x1="0"
          y1="20%"
          x2="0"
          y2="100%"
          gradientUnits="userSpaceOnUse"
        >
          <stop offset="0.18%" stopColor="#3F8CFF" />
          <stop offset="83.05%" stopColor="#00F0FF26" />
        </linearGradient>
      </defs>
        <CartesianGrid vertical={false} color="#DDDDDD" strokeWidth={0.5} />
        {/* <XAxis
          opacity={0.5}
          strokeWidth={0.5}
          fontStyle={"#949494"}
          fontWeight={600}
          color="#DDDDDD"
          fontSize={11}
          axisLine={true}
          dataKey="name"
        /> */}
        <YAxis
          opacity={0.5}
          strokeWidth={0.5}
          fontSize={11}
          fontStyle={"#949494"}
          fontWeight={600}
          color="#DDDDDD"
          axisLine={true}
        >
          <Label
            style={{
              color: "#949494",
              fontFamily: "Golos Text",
              fontSize: "11px",
            }}
            value="Lakhs"
            angle={-90}
            position="left"
            dy={-10}
            dx={10}
          />
        </YAxis>
        <Tooltip
          wrapperStyle={{
            backgroundColor: "#fff",
            outline: "none",
            padding: "1rem",
            borderRadius: "10px",
          }}
          content={<CustomTooltip />}
        />
        {/* <Legend style={{ fontSize: "11px" }} align="center" iconType="square" /> */}
        <Bar
          name="Lakhs"
          radius={[3, 3, 0, 0]}
          maxBarSize={20}
          dataKey="ACCEPTEDON"
          fill="url(#colorUv)" 
          >
            <LabelList dataKey="name" content={renderCustomizedLabel} />

            </Bar>
      </BarChart>
    </ResponsiveContainer>
  );
}
